NOTA GENERALE:
Nessun valore eccetto il primo e l'ultimo byte di ogni sysex (F0 e F7) è
mai >= 80 (128), perchè avrebbe il primo bit a 1, riservato per i messaggi
di stato. Quindi per rappresentare dati più grandi, la Oberheim ha inventato
un trucco (cfr. Appendice A - codifica a 8 bits)

Chain:
1 chain:  12 messaggi
2 chains: 21 messaggi

Quindi probabilmente ho:
messaggi di apertura (HEAD)
9 messaggi (* ogni chain) per i dati (DATA)
messaggi di chiusura (FOOT)

Lunghezza dei messaggi: (inclusivi di apertura 0xF0 e chiusura 0xF7)
* Caso 1 sola chain:
HEAD: 25
DATA: 75
FOOT1: 21
FOOT2: 14

[...]

- Ogni messaggio SysEx inizia per F0 (240) e finisce per F7 (247)
- Poi ho il byte 7E, che indica un sysex universale, non real time.
- Poi c'è il byte per indicare il dispositivo/canale, ma visto che è 
  settato a 7F, vuol dire che è indirizzato a qualsiasi cosa in ascolto.
- byte Sub ID 1, impostato a 00 (disabilitato, credo che questo indichi di
  non leggere considerare il prossimo byte come Sub ID 2, ma proprio come
	data).
- DATI......
- fine: F7


**** I BYTES ADDR ****
Tutti i dati iniziano con: 02 01, poi abbiamo 4 bytes di indirizzo [ADDR].
Sono cosi' composti (notare l'ordine con cui li prendo in considerazione)
ADDR3: Il primo di ogni serie di messaggi (header, data, footer) ha un
       valore che dipende dal tipo di messaggio:
       HEADER: 12 (ovvero 0x0C) * id_chain (che parte da zero) di partenza
			 DATA: 0x00
			 FOOTER:
       Successivamente viene incrementato sempre di 0x38 (56), e ne
			 scrivo il modulo a 0x80 (128) sempre nel byte ADDR3.

ADDR1: Il primo di ogni serie di messaggi (header, data, footer) vale 0x50.
       Successivamente, quando dall'incremento in ADDR3 ho overflow,
			 cambio ADDR1 da 50 a 70, o viceversa.

ADDR2: Il primo di ogni serie ha un valore che dipende dal tipo di messaggio:
       HEADER: 0x7A
			 DATA: 2 * id_chain(che parte da zero)
			 FOOTER:
       Se il cambio è da 50 ==> 70, tutto ok, mentre se ho 70 ==> 50, allora
       incremento ADDR2 di 1.

ADDR4: Il primo di ogni serie ha un valore che dipende dal tipo di messaggio:
       HEADER: 0x75
			 DATA: 0x70
			 FOOTER: 
       Se anche incrementando ADDR2 ho overflow oltre 7F, incremento di 1
       ADDR4.


Combinazioni di inizio (partendo dalla chain 1), alle quali si sommano:
HEADER: 50 7A 00 75
DATA:   50 00 00 70
FOOTER: 50 79 00 75


Header, partenza dalla chain:
1)   50 7A 00 75  (id 0)     0
2)   50 7A 0C 75  (id 1)     12
3)   50 7A 18 75  (id 2)     24
12)  70 7A 04 75  (id 11)    132
127) 70 7F 68 75  (id 126)   1512
128) 70 7F 74 75  (id 127)   1524 => 10111110100

== Regola per costruire i bytes ADDR partendo dal numero contatore ==

Prendiamo il caso della chain 127, ad esempio.
  id = 126
In un messaggio di header, il contatore iniziale è 12 * id_chain.
(Poi verrà incrementato di 56.)
quindi contatore = 12 * 126 = 1512 = 10111101000 in binario.
Questo numero in binario lo suddivido nel seguente modo:
00000 0000101 1 1101000
  A     B     C    D
* D lo metto in ADDR3
* se C è 0, ADDR1 = 0x50, altrimenti 0x70.
* B lo sommo al valore di partenza di ADDR2, e lo metto in ADDR2
* se avessi avuto altre cifre a sinistra di queste (A), tipo (11xxxx...)
  avrei sommato questo valore (11 = 3) al valore di partenza di ADDR4,
	ottenendo	il nuovo valore di ADDR4.

Il contatore di partenza si ottiene con queste formule:
HEADER: contatore =  12 * id_chain
DATA:   contatore = 512 * id_chain
FOOTER: contatore =   2 * id_chain


Mask per ottenere i valori di cui ho bisogno:
ADDR3 1111111    MASK: 0x7F
ADDR1 1          MASK: 0x80
ADDR2 1111111    MASK: 0x7F00
ADDR4 mask negativa di 0x7FFF

Se faccio un AND binario tra il contatore e la maschera, ottengo il
valore richiesto.



Quindi, ricapitolando struttura di ogni messaggio:
* 6 bytes fissi: F0 7E 7F 00 02 01          HEADER
* 4 Bytes che indicano l'indirizzo [ADDR]
* max 64 bytes di dati [DATA]
* byte di chiusura: F7
TOT: max 75 bytes

======== PRIMO SYSEX =========

Chain 1, con un po' di roba
F0 7E 7F 00 02 01 50 7A 00 75 00 53 49 4C 45 4E 54 20 00 4D 49 44 49 41 F7
                                 S  I  L  E  N  T        M  I  D  I  A
									      ^^
Chain 2, default
F0 7E 7F 00 02 01 50 7A 0C 75 00 20 44 45 46 41 55 4C 00 54 20 20 20 20 F7
                                    D  E  F  A  U  L     T             
									      ^^

Chain 3, default
F0 7E 7F 00 02 01 50 7A 18 75 00 20 44 45 46 41 55 4C 00 54 20 20 20 20 F7
                        ^^

Chain 4, default
F0 7E 7F 00 02 01 50 7A 24 75 00 20 44 45 46 41 55 4C 00 54 20 20 20 20 F7
                        ^^

Chain 1+2:
F0 7E 7F 00 02 01 50 7A 00 75 00 53 49 4C 45 4E 54 20 00 4D 49 44 49 41 20 44 00 45 46 41 55 4C 54 20 00 20 20 20 F7
                        ^^       S  I  L  E  N  T        M  I  D  I  A     D     E  F  A  U  L  T                
                              | parte da qui
Chain 2+3:
F0 7E 7F 00 02 01 50 7A 0C 75 00 20 44 45 46 41 55 4C 00 54 20 20 20 20 20 44 00 45 46 41 55 4C 54 20 00 20 20 20 F7
                        ^^          D  E  F  A  U  L     T                 D     E  F  A  U  L  T                

Chain 3+4:
F0 7E 7F 00 02 01 50 7A 18 75 00 20 44 45 46 41 55 4C 00 54 20 20 20 20 20 44 00 45 46 41 55 4C 54 20 00 20 20 20 F7
                        ^^          D  E  F  A  U  L     T                 D     E  F  A  U  L  T                



* La descrizione (testo)
Lunghezza max per chain: 12chars
parte dalla posizione n. 10 (partendo dalla 0, e
inclusi tutti i bytes del messaggio, anche gli headers).
Se la descrizione è più corta di 12 caratteri, riempio con spazi (0x20).

In caso voglia mettere più di una chain, le concateno, creando una lunga
descrizione.

Per scriverla, li scrivo con codifica per 8 bits (vedi Appendice A), quindi
1 byte di codifica + 7 caratteri, e ripeto finché non arrivo alla fine
della/e descrizione/i.


* Il carattere segnato (chain singole)
Abbiamo questa corrispondenza:
Chain 1 (indice 0): 0x00 = 0 in decimale
Chain 2 (indice 1): 0x0C = 12 in decimale
Chain 3 (indice 2): 0x18 = 24 in decimale
Chain 4 (indice 3): 0x24 = 36 in decimale

Quindi dovrebbe essere l'indice della chain, moltiplicato per 12. (perchè??)

Nel caso di chain multiple, indica comunque l'indice della PRIMA chain di
quelle che sto inviando.

ATTENZIONE
Quando invio (relativamente) parecchi dati (tipo con 5 chain si verifica già)
questo header verrà suddiviso in vari messaggi.

** Numero di messaggi occupati dall'header: **
ho max 64 bytes disponibili per ogni messaggio, ma solo 56 sono utilizzabili
realmente (gli altri 8 sono bytes di codifica)
Ho 12 bytes da utilizzare, per ogni chain, quindi il numero di messaggi è:
ceil((n_chains * 12) / 56)


========= FOOTER ===========

Chain 1:
F0 7E 7F 00 02 01|50 79 00 75|00 02 00 F7
                        ^^       ^^
Chain 2:
F0 7E 7F 00 02 01|50 79 02 75|00 00 00 F7
                        ^^       ^^
Chain 3:
F0 7E 7F 00 02 01|50 79 04 75|00 00 00 F7
                        ^^       ^^
Chain 4:
F0 7E 7F 00 02 01|50 79 06 75|00 00 00 F7
                        ^^       ^^
Chain 1+2:
F0 7E 7F 00 02 01|50 79 00 75|00 02 00 00 00 F7
                        ^^       ^^
Chain 2+3:
F0 7E 7F 00 02 01|50 79 02 75|00 00 00 00 00 F7
                        ^^       ^^

Chain 50..59
F0 7E 7F 00 02 01|50 79 62 75|00 00 00 00 00 00 00 00=00 00 00 00 00 00 00 00=00 00 00 00 00 00 00 F7 

Chain 118..128
F0 7E 7F 00 02 01|70 79 6A 75|00 00 00 00 00 00 00 00=00 00 00 00 00 00 00 00=00 00 00 00 00 00 00 00=00 00 F7 

Ogni chain incrementa i dati di 2 bytes. Poi vanno messi sempre a gruppi
di 8, con il primo byte dell'ottetto che il solito byte di codifica.


I 2 bytes per ogni chain sono il tipo di controllo utilizzato
per lo switch.
I valori possibili per il primo byte sono:
0x00: off
0x01: pedale 1
0x02: pedale 2
0x03: pedale 3
0x04: func key f6
0x05: enter button
0x06: inc
0x07: dec
0x08: cursor keys
0x09: numeric pad
0x0A: Nota

Nel secondo byte, nel caso della nota, salvo il valore,
avendo tipo 0x00 la nota A0, e via a salire.


=========== DATA ============
Ho 256 posizioni, per ogni posizione devo salvare:
Banco (A-H)
Patch number (1-128)

Analizziamo un msg DATA: (chain 1)
F0 7E 7F 00 02 01 50 00 00 70 | ...
F0 7E 7F 00 02 01 50 00 38 70 | ...
F0 7E 7F 00 02 01 50 00 70 70 | ...
F0 7E 7F 00 02 01 70 00 28 70 | ...
F0 7E 7F 00 02 01 70 00 60 70 | ...
F0 7E 7F 00 02 01 50 01 18 70 | ...
F0 7E 7F 00 02 01 50 01 50 70 | ...
F0 7E 7F 00 02 01 70 01 08 70 | ...
F0 7E 7F 00 02 01 70 01 40 70 | ...
                  ^^ ^^ ^^

Analizziamo un msg DATA vuoto: (chain 2)
F0 7E 7F 00 02 01 50 02 00 70 | 7F (<== 64 volte questo byte, che è 127 in decimale)
F0 7E 7F 00 02 01 50 02 38 70 | 7F...
F0 7E 7F 00 02 01 50 02 70 70 | 7F...
F0 7E 7F 00 02 01 70 02 28 70 | 7F...
F0 7E 7F 00 02 01 70 02 60 70 | 7F...
F0 7E 7F 00 02 01 50 03 18 70 | 7F...
F0 7E 7F 00 02 01 50 03 50 70 | 7F...
F0 7E 7F 00 02 01 70 03 08 70 | 7F...
F0 7E 7F 00 02 01 70 03 40 70 | 7F...
                  ^^ ^^ ^^

Analizziamo un msg DATA vuoto: (chain 3)
F0 7E 7F 00 02 01 50 04 00 70 | 7F (<== 64 volte questo byte, che è 127 in decimale)
F0 7E 7F 00 02 01 50 04 38 70 | 7F...
F0 7E 7F 00 02 01 50 04 70 70 | 7F...
F0 7E 7F 00 02 01 70 04 28 70 | 7F...
F0 7E 7F 00 02 01 70 04 60 70 | 7F...
F0 7E 7F 00 02 01 50 05 18 70 | 7F...
F0 7E 7F 00 02 01 50 05 50 70 | 7F...
F0 7E 7F 00 02 01 70 05 08 70 | 7F...
F0 7E 7F 00 02 01 70 05 40 70 | 7F...
                  ^^ ^^ ^^

Analizziamo un msg DATA vuoto: (chain 4)
F0 7E 7F 00 02 01 50 06 00 70 | 7F (<== 64 volte questo byte, che è 127 in decimale)
F0 7E 7F 00 02 01 50 06 38 70 | 7F...
F0 7E 7F 00 02 01 50 06 70 70 | 7F...
F0 7E 7F 00 02 01 70 06 28 70 | 7F...
F0 7E 7F 00 02 01 70 06 60 70 | 7F...
F0 7E 7F 00 02 01 50 07 18 70 | 7F...
F0 7E 7F 00 02 01 50 07 50 70 | 7F...
F0 7E 7F 00 02 01 70 07 08 70 | 7F...
F0 7E 7F 00 02 01 70 07 40 70 | 7F...
                  ^^ ^^ ^^


Chain 1+2
F0 7E 7F 00 02 01 50 00 00 70 | ...
F0 7E 7F 00 02 01 50 00 38 70 | ...
F0 7E 7F 00 02 01 50 00 70 70 | ...
F0 7E 7F 00 02 01 70 00 28 70 | ...
F0 7E 7F 00 02 01 70 00 60 70 | ...
F0 7E 7F 00 02 01 50 01 18 70 | ...
F0 7E 7F 00 02 01 50 01 50 70 | ...
F0 7E 7F 00 02 01 70 01 08 70 | ...
F0 7E 7F 00 02 01 70 01 40 70 | ...
===
F0 7E 7F 00 02 01 70 01 78 70 | ...
F0 7E 7F 00 02 01 50 02 30 70 | ...
F0 7E 7F 00 02 01 50 02 68 70 | ...
F0 7E 7F 00 02 01 70 02 20 70 | ...
F0 7E 7F 00 02 01 70 02 58 70 | ...
F0 7E 7F 00 02 01 50 03 10 70 | ...
F0 7E 7F 00 02 01 50 03 48 70 | ...
F0 7E 7F 00 02 01 70 03 00 70 | ...
F0 7E 7F 00 02 01 70 03 38 70 | ...


Regola (già spiegata nella sezione ADDR):
Condizione iniziale:
Byte 1: 0x50
Byte 2: 2 * id_chain(che parte da zero)
Byte 3: 0x00

Incremento il byte 3 sempre di 0x38 (56), e ne scrivo il modulo a 0x80
(128) sempre nel byte 3.
Quando ho overflow, cambio il 1° byte da 50 a 70, o viceversa.
Se il cambio è da 50 ==> 70, tutto ok, mentre se ho 70 ==> 50, allora
incremento il 2° byte di 1.



Analizziamo i 64bytes di dati effettivi.
00 41 15 41 16 41 17 41 00 18 41 16 41 15

La scaletta vera dovrebbe essere:
1: A-021 = 0x15
2: A-022 = 0x16
3: A-023 = 0x17
4: A-024 = 0x18
5: A-022 = 0x16
6: A-021 = 0x15
7: A-025 = 0x19
8: A-026 = 0x1A
9: A-027 = 0x1B
...
111: A-126
112: A-127
113: B-001

** Banco: **
A: 0x41
B: 0x42
C: 0x43
D: 0x44
E: 0x45
F: 0x46
G: 0x47
H: 0x48

Alterno Banco - Patch, e li scrivo alternati a gruppi così formati:
1 byte di codifica
7 bytes delle alternanze

Continuo finché non arrivo alla fine.
Quando ho posizioni vuote (non utilizzate), metto il valore 0xFF sia al
banco che al numero patch, ma per la codifica si trasforma in 0x7F (vedi
Appendice A)


Ho per ogni messaggio 56 bytes di dati (2bytes per patch perché ho banco
+ patch) ==> 28 patch per messaggio.


== Appendice A - Codifica a 8 bits ==

Le parole midi sono di dimensione 1 byte (8bits). Però il primo bit (MSB)
è il cosiddetto "bit di stato". Se è impostato a 0, il byte è di dati,
altrimenti è un byte di stato. Quindi mi rimangono disponibili solo 7 bits,
ottenendo un range di valori 0-127.
Come rappresentare i valori 128-255? La Oberheim utilizza questo sistema:
Mette i bytes a gruppi di 8 bytes, con il primo degli otto che è un byte
di codifica, e i restanti 7 di dati reali.
In questo primo byte gli 1 in binario hanno una funzione speciale.
Un bit a 1 nella posizione n indica che il byte dell'ottetto nella medesima
posizione avrebbe il bit più significativo a 1, soppresso perché non permesso
dal protocollo MIDI.
Ovviamente il suo primo bit è a 0 (altrimenti saremmo daccapo...).

Esempio: 07 36 42 37 42 00 70 21
         ^^----byte di stato
0x07 = 00000111
Gli 1 sono nella posizione 6,7,8, quindi i bytes 0x00, 0x70, 0x21 in realtà
avevano il primo bit a 1, e quindi il loro vero valore va sommato di
0x80 (128).
